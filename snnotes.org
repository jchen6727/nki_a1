
* 20mar5 - setting up
** cloned from https://github.com/NathanKlineInstitute/A1

then made a new branch samn off of salva branch
for now, will use samn for development ...

** wav files converted to mat to send to model

data is in data/ICoutput/ICoutput_CF_9600_10400_wav_01_ba_peter.mat
so those are spikes from inferior colliculus

can take a look to see how it looks ...

** make sure using py3env

now setup laptop to use anaconda with neurosim dir structures
so, that py3env uses python 3.6 with anaconda ... 

** compile

nrnivmodl mod

** run

make a myrun script wrapper
that contains
mpiexec -n $1 nrniv -python -mpi init.py

init.py is entry point for network model

which param to scale down so can run on laptop?

sal mentioned:
cfg.scaleDensity â€” if you set to 0.025 it's ~400 cells, runs in 60 sec

try out a 2 s sim with scale of 0.025 ...

myrun 8

with scale of 1.0 there are 1607 cells on each node ... for 12856 cells total ... too much
for lowly laptop ...

with scale of 0.025, 8 cores, ~43-44 cells per node ...

  Done; run time = 28.73 s; real-time ratio: 0.07.

  Cells: 347
  Connections: 7412 (21.36 per cell)
  Synaptic contacts: 14473 (41.71 per cell)
  Spikes: 1830 (2.64 Hz)
   NGF1 : 0.000 Hz
   IT2 : 0.083 Hz
   IT3 : 0.204 Hz
   SOM3 : 50.000 Hz
   PV3 : 0.000 Hz
   VIP3 : 0.000 Hz
   NGF3 : 0.000 Hz
   ITP4 : 0.167 Hz
   ITS4 : 9.633 Hz
   PV4 : 0.000 Hz
   IT5A : 3.417 Hz
   CT5A : 0.083 Hz
   SOM5A : 38.000 Hz
   PV5A : 0.000 Hz
   IT5B : 0.606 Hz
   CT5B : 0.000 Hz
   PT5B : 0.061 Hz
   SOM5B : 34.000 Hz
   PV5B : 0.000 Hz
   IT6 : 2.213 Hz
   CT6 : 0.133 Hz
   SOM6 : 39.333 Hz
   PV6 : 0.000 Hz
   TC : 0.000 Hz
   TCM : 0.000 Hz
   IRE : 0.000 Hz
   IREM : 0.000 Hz
   IC : 11.373 Hz
  Simulated time: 2.0 s; 8 workers
  Run time: 28.73 s
Saving output as data/v11_manualTune//v11_sim52.json  ...

most cells not firing ...

could run scale of 0.1 for ~1300 cells ...

myrun 8

getting lots of these errors: exp(inf) out of range, returning exp(700)

  Cells: 1313
  Connections: 130037 (99.04 per cell)
  Synaptic contacts: 253484 (193.06 per cell)
  Spikes: 4513 (1.72 Hz)
   NGF1 : 0.000 Hz
   IT2 : 0.000 Hz
   PV2 : 0.000 Hz
   VIP2 : 0.000 Hz
   NGF2 : 0.000 Hz
   IT3 : 0.049 Hz
   SOM3 : 56.381 Hz
   PV3 : 0.000 Hz
   VIP3 : 0.000 Hz
   NGF3 : 0.000 Hz
   ITP4 : 0.056 Hz
   ITS4 : 3.398 Hz
   SOM4 : 62.667 Hz
   PV4 : 0.000 Hz
   VIP4 : 0.000 Hz
   NGF4 : 0.000 Hz
   IT5A : 0.248 Hz
   CT5A : 0.000 Hz
   SOM5A : 32.667 Hz
   PV5A : 0.000 Hz
   VIP5A : 0.000 Hz
   IT5B : 0.113 Hz
   CT5B : 0.000 Hz
   PT5B : 0.014 Hz
   SOM5B : 37.030 Hz
   PV5B : 0.000 Hz
   VIP5B : 0.000 Hz
   NGF5B : 0.000 Hz
   IT6 : 2.147 Hz
   CT6 : 0.100 Hz
   SOM6 : 34.444 Hz
   PV6 : 0.000 Hz
   VIP6 : 0.000 Hz
   NGF6 : 0.000 Hz
   TC : 0.000 Hz
   TCM : 0.000 Hz
   HTC : 0.000 Hz
   IRE : 0.000 Hz
   IREM : 0.000 Hz
   IC : 10.933 Hz
  Simulated time: 2.0 s; 8 workers
  Run time: 359.73 s
Saving output as data/v11_manualTune//v11_sim52.json  ... 
Finished saving!
Done; saving time = 1.06 s.

at this scale, have lots of populations not firing at all as well ...

are there exp(inf) warnings for scale of 1 too?

try 200 ms sim at that scale to see ... (the warnings started before sim reached 100 ms)

myrun 8

yeah, looks like get same errors at scale of 1
exp(inf) out of range, returning exp(700)

takes a while to get network wired, of course ... millions of synapses per node

then crashes eventually with out of memory problem ... when it gets to gather:

Gathering data...
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
[samndp7730:13791] *** Process received signal ***
[samndp7730:13791] Signal: Aborted (6)
[samndp7730:13791] Signal code:  (-6)

* 20mar6 - testing/tuning manually
** reading code/testing/tuning smaller version of model

in the 0.1 scaledensity simulation, the IC cells are firing ~8 Hz when providing
the auditory input signal ... but the TC cells are not firing at all

SOM cells fire too much, most other populations do not fire too much

myrun 12

  Cells: 1313
  Connections: 130037 (99.04 per cell)
  Synaptic contacts: 253484 (193.06 per cell)
  Spikes: 4526 (1.72 Hz)
   NGF1 : 0.000 Hz
   IT2 : 0.000 Hz
   PV2 : 0.000 Hz
   VIP2 : 0.000 Hz
   NGF2 : 0.000 Hz
   IT3 : 0.049 Hz
   SOM3 : 56.381 Hz
   PV3 : 0.000 Hz
   VIP3 : 0.000 Hz
   NGF3 : 0.000 Hz
   ITP4 : 0.056 Hz
   ITS4 : 3.398 Hz
   SOM4 : 62.667 Hz
   PV4 : 0.000 Hz
   VIP4 : 0.000 Hz
   NGF4 : 0.000 Hz
   IT5A : 0.248 Hz
   CT5A : 0.000 Hz
   SOM5A : 32.667 Hz
   PV5A : 0.000 Hz
   VIP5A : 0.000 Hz
   IT5B : 0.113 Hz
   CT5B : 0.000 Hz
   PT5B : 0.014 Hz
   SOM5B : 37.030 Hz
   PV5B : 0.000 Hz
   VIP5B : 0.000 Hz
   NGF5B : 0.000 Hz
   IT6 : 2.147 Hz
   CT6 : 0.100 Hz
   SOM6 : 34.444 Hz
   PV6 : 0.000 Hz
   VIP6 : 0.000 Hz
   NGF6 : 0.000 Hz
   TC : 0.000 Hz
   TCM : 0.000 Hz
   HTC : 0.000 Hz
   IRE : 0.000 Hz
   IREM : 0.000 Hz
   IC : 11.107 Hz
  Simulated time: 2.0 s; 12 workers
  Run time: 327.72 s
  Saving output as data/20mar6//20mar6_A0.pkl ...

so, where is connection from IC -> THAL ?   

in cfg.py have this:
cfg.ICThalInput = {'file': 'data/ICoutput/ICoutput_CF_9600_10400_wav_01_ba_peter.mat', 'startTime': 500}  # parameters to generate realistic cochlear + IC input

and in netParams.py have this:
if cfg.ICThalInput:
which loads spikes from file and then creates VecStims like this:
netParams.popParams['IC'] = {'cellModel': 'VecStim', 'numCells': numCells, 'ynormRange': layer['cochlear'],'spkTimes': spkTimes}
but, do not see the weight set ...aha, it's set below as
    # connect cochlear + IC thalamic inputs
    if cfg.ICThalInput:
        netParams.connParams['IC->ThalE'] = { 
            'preConds': {'pop': 'IC'}, 
            'postConds': {'cellType': ['TC', 'HTC']},
            'sec': 'soma', 
            'loc': 0.5,
            'synMech': ESynMech,
            'probability': cfg.probInput['ThalE'],
            'weight': cfg.weightInput['ThalE'],
            'synMechWeightFactor': cfg.synWeightFractionEE,
            'delay': cfg.delayBkg}
        
        netParams.connParams['IC->ThalI'] = { 
            'preConds': {'pop': 'IC'}, 
            'postConds': {'cellType': ['RE']},
            'sec': 'soma', 
            'loc': 0.5,
            'synMech': ESynMech,
            'probability': cfg.probInput['ThalI'], 
            'weight': cfg.weightInput['ThalI'],
            'synMechWeightFactor': cfg.synWeightFractionEI,
            'delay': cfg.delayBkg}  

so, to increase weight of those IC inputs just increase cfg.weightInput['ThalE'] and/or cfg.weightInput['ThalI']

try that out . . .

even if that works should have some activity throughout the network in the absence of auditory inputs

hmm, still have 0 TC rates:
   TC : 0.000 Hz
   TCM : 0.000 Hz
   HTC : 0.000 Hz
   IRE : 0.000 Hz
   IREM : 0.000 Hz
   IC : 11.440 Hz

   did not seem to impact TC rates ... or activity

data/20mar6/20mar6_A0_traces_gid_1204.png   
data/20mar6/20mar6_A0_traces_gid_1215.png
data/20mar6/20mar6_A0_traces_gid_1230.png
data/20mar6/20mar6_A0_traces_gid_1233.png
data/20mar6/20mar6_A0_traces_gid_1248.png
data/20mar6/20mar6_A0_traces_gid_1263.png
raster: data/20mar6/20mar6_A0_raster.png

probably because no inputs at all ??
cfg.probInput = {'ThalE': 0.0, 'ThalI': 0.0} # {'ThalE': 0.25, 'ThalI': 0.25}  # probability of conn

so need to set that to a positive value ...

ok, put those weights back to 0.5 and put the probabilities at 0.25 ... see how it looks

myrun 12

ok, looks a lot different now, though still a lot of types not firing at all:

  Cells: 1313
  Connections: 130736 (99.57 per cell)
  Synaptic contacts: 254882 (194.12 per cell)
  Spikes: 5384 (2.05 Hz)
   NGF1 : 0.000 Hz
   IT2 : 0.000 Hz
   PV2 : 0.000 Hz
   VIP2 : 0.000 Hz
   NGF2 : 0.000 Hz
   IT3 : 0.054 Hz
   SOM3 : 57.429 Hz
   PV3 : 0.000 Hz
   VIP3 : 0.000 Hz
   NGF3 : 0.000 Hz
   ITP4 : 0.056 Hz
   ITS4 : 3.655 Hz
   SOM4 : 64.000 Hz
   PV4 : 0.000 Hz
   VIP4 : 0.000 Hz
   NGF4 : 0.000 Hz
   IT5A : 0.248 Hz
   CT5A : 0.000 Hz
   SOM5A : 32.833 Hz
   PV5A : 0.000 Hz
   VIP5A : 0.000 Hz
   IT5B : 0.142 Hz
   CT5B : 0.000 Hz
   PT5B : 0.014 Hz
   SOM5B : 39.394 Hz
   PV5B : 0.000 Hz
   VIP5B : 0.000 Hz
   NGF5B : 0.000 Hz
   IT6 : 2.260 Hz
   CT6 : 0.113 Hz
   SOM6 : 34.556 Hz
   PV6 : 0.083 Hz
   VIP6 : 0.000 Hz
   NGF6 : 0.000 Hz
   TC : 10.727 Hz
   TCM : 11.156 Hz
   HTC : 8.222 Hz
   IRE : 6.089 Hz
   IREM : 4.800 Hz
   IC : 11.573 Hz
  Simulated time: 2.0 s; 12 workers
  Run time: 353.24 s

data/20mar6/20mar6_A0_traces_gid_1204.png   
data/20mar6/20mar6_A0_traces_gid_1215.png
data/20mar6/20mar6_A0_traces_gid_1230.png
data/20mar6/20mar6_A0_traces_gid_1233.png
data/20mar6/20mar6_A0_traces_gid_1248.png
data/20mar6/20mar6_A0_traces_gid_1263.png
raster: data/20mar6/20mar6_A0_raster.png

seems like SOM cells overactive in every layer ... that's probably leading to suppression of everything else ...

try turning down I -> E gain ... and I -> I gain ... and EIGain (in cfg.py)

cfg.EEGain = 1.0 
cfg.EIGain = 0.75 # 1.0 #0.75
cfg.IEGain = 0.75 # 1.0 #0.75
cfg.IIGain = 0.75 # 1.0 #0.5

cfg.simLabel = '20mar6_A1'

myrun 12

data/20mar6/20mar6_A1_traces_gid_1204.png   
data/20mar6/20mar6_A1_traces_gid_1215.png
data/20mar6/20mar6_A1_traces_gid_1230.png
data/20mar6/20mar6_A1_traces_gid_1233.png
data/20mar6/20mar6_A1_traces_gid_1248.png
data/20mar6/20mar6_A1_traces_gid_1263.png
raster: data/20mar6/20mar6_A1_raster.png

did not make much difference...

SOM still dominating ...

  Cells: 1313
  Connections: 130736 (99.57 per cell)
  Synaptic contacts: 254882 (194.12 per cell)
  Spikes: 5849 (2.23 Hz)
   NGF1 : 0.000 Hz
   IT2 : 0.020 Hz
   PV2 : 0.000 Hz
   VIP2 : 0.000 Hz
   NGF2 : 0.000 Hz
   IT3 : 0.139 Hz
   SOM3 : 60.952 Hz
   PV3 : 0.000 Hz
   VIP3 : 0.000 Hz
   NGF3 : 0.000 Hz
   ITP4 : 0.185 Hz
   ITS4 : 5.390 Hz
   SOM4 : 65.000 Hz
   PV4 : 0.000 Hz
   VIP4 : 0.000 Hz
   NGF4 : 0.000 Hz
   IT5A : 0.438 Hz
   CT5A : 0.000 Hz
   SOM5A : 34.667 Hz
   PV5A : 0.000 Hz
   VIP5A : 0.000 Hz
   IT5B : 0.113 Hz
   CT5B : 0.000 Hz
   PT5B : 0.014 Hz
   SOM5B : 41.455 Hz
   PV5B : 0.000 Hz
   VIP5B : 0.000 Hz
   NGF5B : 0.000 Hz
   IT6 : 2.073 Hz
   CT6 : 0.147 Hz
   SOM6 : 34.444 Hz
   PV6 : 0.000 Hz
   VIP6 : 0.000 Hz
   NGF6 : 0.000 Hz
   TC : 8.364 Hz
   TCM : 10.711 Hz
   HTC : 9.111 Hz
   IRE : 5.956 Hz
   IREM : 4.800 Hz
   IC : 11.160 Hz

test with IEGain of 0 to see if E cells activate without the inhib inputs ...

cfg.simLabel = '20mar6_A2'
cfg.IEGain = 0.0 # 0.75 # 1.0 #0.75

myrun 12

data/20mar6/20mar6_A2_traces_gid_1204.png   
data/20mar6/20mar6_A2_traces_gid_1215.png
data/20mar6/20mar6_A2_traces_gid_1230.png
data/20mar6/20mar6_A2_traces_gid_1233.png
data/20mar6/20mar6_A2_traces_gid_1248.png
data/20mar6/20mar6_A2_traces_gid_1263.png
raster: data/20mar6/20mar6_A2_raster.png

well, it has some impact but E populations are mostly silent ...

  Spikes: 14203 (5.41 Hz)
   NGF1 : 0.000 Hz
   IT2 : 10.222 Hz
   PV2 : 0.000 Hz
   VIP2 : 0.000 Hz
   NGF2 : 0.000 Hz
   IT3 : 0.555 Hz
   SOM3 : 105.333 Hz
   PV3 : 41.882 Hz
   VIP3 : 0.000 Hz
   NGF3 : 0.000 Hz
   ITP4 : 0.000 Hz
   ITS4 : 17.839 Hz
   SOM4 : 96.667 Hz
   PV4 : 19.704 Hz
   VIP4 : 0.000 Hz
   NGF4 : 0.000 Hz
   IT5A : 0.000 Hz
   CT5A : 0.000 Hz
   SOM5A : 44.667 Hz
   PV5A : 0.000 Hz
   VIP5A : 0.000 Hz
   IT5B : 0.000 Hz
   CT5B : 0.000 Hz
   PT5B : 1.830 Hz
   SOM5B : 54.485 Hz
   PV5B : 0.000 Hz
   VIP5B : 0.000 Hz
   NGF5B : 0.000 Hz
   IT6 : 3.627 Hz
   CT6 : 0.280 Hz
   SOM6 : 36.333 Hz
   PV6 : 7.750 Hz
   VIP6 : 0.000 Hz
   NGF6 : 0.000 Hz
   TC : 7.455 Hz
   TCM : 8.889 Hz
   HTC : 3.333 Hz
   IRE : 6.756 Hz
   IREM : 5.956 Hz
   IC : 10.640 Hz

and try another with cortical connectivity turned off ... (may need to adjust the noise inputs)
cfg.simLabel = '20mar6_A3'   
cfg.addConn = 0   

myrun 12

  Spikes: 6048 (2.30 Hz)
   NGF1 : 0.000 Hz
   IT2 : 0.020 Hz
   PV2 : 0.000 Hz
   VIP2 : 0.000 Hz
   NGF2 : 0.000 Hz
   IT3 : 0.081 Hz
   SOM3 : 38.190 Hz
   PV3 : 0.000 Hz
   VIP3 : 0.000 Hz
   NGF3 : 0.000 Hz
   ITP4 : 0.120 Hz
   ITS4 : 10.048 Hz
   SOM4 : 42.333 Hz
   PV4 : 0.000 Hz
   VIP4 : 0.000 Hz
   NGF4 : 0.000 Hz
   IT5A : 3.048 Hz
   CT5A : 0.133 Hz
   SOM5A : 35.833 Hz
   PV5A : 0.000 Hz
   VIP5A : 0.000 Hz
   IT5B : 0.922 Hz
   CT5B : 0.099 Hz
   PT5B : 0.071 Hz
   SOM5B : 41.030 Hz
   PV5B : 0.000 Hz
   VIP5B : 0.000 Hz
   NGF5B : 0.000 Hz
   IT6 : 2.733 Hz
   CT6 : 0.120 Hz
   SOM6 : 33.333 Hz
   PV6 : 0.000 Hz
   VIP6 : 0.000 Hz
   NGF6 : 0.000 Hz
   TC : 8.970 Hz
   TCM : 8.622 Hz
   HTC : 5.111 Hz
   IRE : 6.133 Hz
   IREM : 5.911 Hz
   IC : 10.853 Hz

data/20mar6/20mar6_A3_traces_gid_1204.png   
data/20mar6/20mar6_A3_traces_gid_1215.png
data/20mar6/20mar6_A3_traces_gid_1230.png
data/20mar6/20mar6_A3_traces_gid_1233.png
data/20mar6/20mar6_A3_traces_gid_1248.png
data/20mar6/20mar6_A3_traces_gid_1263.png
raster: data/20mar6/20mar6_A3_raster.png
   
ok, SOM still firing but not much from the other types ... can adjust noise inputs first;
to aim for ~1 Hz firing of all types ... ? or perhaps only E types ... 

* 20oct22 - back to model
** back to model -- git merge samn with salva so have latest

cloned onto cycle

git clone git@github.com:NathanKlineInstitute/A1.git
cd A1
git branch
git pull origin salva
git branch
git checkout samn
git merge origin/salva
Auto-merging netParams.py
CONFLICT (content): Merge conflict in netParams.py
Auto-merging cfg.py
CONFLICT (content): Merge conflict in cfg.py
Automatic merge failed; fix conflicts and then commit the result.
git add netParams.py cfg.py
git commit -m 'merge'
git push origin samn
git mv snnotes.dol snnotes.org
git commit -m 'to org'
git push origin samn

** homeostatic synapses to regulate/tune firing rates

can either do via hsyn.mod or in py with periodic callbacks - similar to smartagent weight normalizations

http://www.netpyne.org/reference.html?highlight=hsyn

** old NetPyNE slack discussion on using hsyn.mod in NetPyNE (from 5/4/20)

Haroon Anwar It appears that homeostatic synaptic plasticity is associated with the synaptic
mechanism (and therefore should be set/declared in netParams.synMechParams) instead of synaptic
connection (as in case of STDP rule). I see the following lines on NetPyNe website but it is not
clear to me how to use this option: selfNetCon (optional) - dictionary with the parameters of a
NetCon between the cell voltage and the synapse, required by some synaptic mechanisms such as the
homeostatic synapse (hsyn). e.g. 'selfNetCon': {'sec': 'soma' , 'threshold': -15, 'weight': -1,
'delay': 0}
salvadord think we had an example with homeostatic syns â€” did you find that? otherwise Iâ€™ll look for it after lunch
Haroon Anwar no i didnâ€™t find. If you can look for it, would be great help.
salvadord not finding the exampleâ€¦ what was the name of the mod file for homeostatic syns?
samn:speech_balloon: hsyn.mod
salvadord thx
salvadord haroon, found this in samâ€™s netpyne version of m1 model from ~2017 â€¦ maybe try
something similar and let me know if works: netParams.synMechParams['AMPA'] =
{'mod':'hsyn','tau1':0.05,'tau2':5.3,'e':0,'scaling':1,'targetrate':5,'scalefactor':1.0,'scaleratefctr':scaleratefctr,
'selfNetCon': {'threshold': -15, 'weight': -1, 'delay': 0}}
Haroon Anwar ok
let me try
Haroon Anwar salva, can you please send me the link to this m1 model?
salvadord this version is in /u/samn/m1np
Haroon Anwar thanks

** test net

using a scaled down version for testing
cfg.scaledensity=0.1

for plotting, do not call matplotlib.use('Agg') on cycle ... just on server (gcp)

./myrun 30

** replace AMPA with hsyn 

will need diff AMPA mech for E and I neurons ...

netParams.synMechParams['AMPA'] = {'mod':'hsyn','tau1':0.05,'tau2':5.3,'e':0,'scaling':1,'targetrate':5,'scalefactor':1.0,'scaleratefctr':scaleratefctr,
'selfNetCon': {'threshold': -15, 'weight': -1, 'delay': 0}}

ok, adjusting to have option whether to use the homeostatic scaling ... ideally would want to have param
for different target rates for each population ... will add that in if/when basic mechanism is working

* 23aug2
** sz modeling

EG had szdelta branch, pull from there and merge with samn

git pull origin szdelta

From github.com:NathanKlineInstitute/A1
 * branch            szdelta    -> FETCH_HEAD
Auto-merging netParams.py
CONFLICT (content): Merge conflict in netParams.py
Auto-merging init.py
CONFLICT (content): Merge conflict in init.py
Auto-merging cfg.py
CONFLICT (content): Merge conflict in cfg.py
Automatic merge failed; fix conflicts and then commit the result.

ok, fixed/updated those files and commited ... will stick with samn branch moving forward

* 23aug3
** test run

nrnivmodl mod

./myrun 30

  Cells: 1273
  Connections: 0 (0.00 per cell)
  Spikes: 112493 (8.84 Hz)
  Simulated time: 10.0 s; 30 workers
  Run time: 205.01 s
   NGF1 : 3.421 Hz
   IT2 : 4.434 Hz
   PV2 : 132.900 Hz
   VIP2 : 15.700 Hz
   NGF2 : 13.400 Hz
   IT3 : 3.694 Hz
   SOM3 : 22.914 Hz
   PV3 : 27.712 Hz
   VIP3 : 19.390 Hz
   NGF3 : 6.540 Hz
   ITP4 : 7.131 Hz
   ITS4 : 5.891 Hz
   SOM4 : 14.650 Hz
   PV4 : 21.100 Hz
   VIP4 : 29.400 Hz
   NGF4 : 7.700 Hz
   IT5A : 2.309 Hz
   CT5A : 1.300 Hz
   SOM5A : 22.200 Hz
   PV5A : 41.467 Hz
   VIP5A : 62.700 Hz
   IT5B : 6.496 Hz
   CT5B : 0.373 Hz
   PT5B : 0.615 Hz
   SOM5B : 48.440 Hz
   PV5B : 32.569 Hz
   VIP5B : 7.000 Hz
   NGF5B : 5.300 Hz
   IT6 : 15.431 Hz
   CT6 : 12.926 Hz
   SOM6 : 60.150 Hz
   PV6 : 37.138 Hz
   NGF6 : 94.100 Hz
   TC : 41.000 Hz
   TCM : 39.147 Hz
   HTC : 57.750 Hz
   IRE : 4.027 Hz
   IREM : 3.107 Hz
   TI : 18.380 Hz
   TIM : 18.300 Hz
Saving output as data/23aug3_A0/23aug3_A0_data.pkl ... 
Finished saving!
  Done; saving time = 2.56 s.

pretty fast runtime ... a little over 3 minutes for 10 s of simulation ...

but this was at 10% density:
cfg.scaleDensity # 0.1

ok, much slower with 100% density ... (on cycle with 30 cores)

  Cells: 12908
  Connections: 0 (0.00 per cell)
  Spikes: 273942 (2.12 Hz)
  Simulated time: 10.0 s; 30 workers
  Run time: 7604.76 s
   NGF1 : 1.752 Hz
   IT2 : 0.484 Hz
   SOM2 : 32.900 Hz
   PV2 : 12.138 Hz
   VIP2 : 24.233 Hz
   NGF2 : 10.791 Hz
   IT3 : 0.209 Hz
   SOM3 : 1.147 Hz
   PV3 : 9.172 Hz
   VIP3 : 20.003 Hz
   NGF3 : 5.747 Hz
   ITP4 : 0.495 Hz
   ITS4 : 0.475 Hz
   SOM4 : 1.639 Hz
   PV4 : 5.221 Hz
   VIP4 : 15.131 Hz
   NGF4 : 8.023 Hz
   IT5A : 2.140 Hz
   CT5A : 0.779 Hz
   SOM5A : 3.250 Hz
   PV5A : 4.764 Hz
   VIP5A : 18.070 Hz
   NGF5A : 14.550 Hz
   IT5B : 4.446 Hz
   CT5B : 0.242 Hz
   PT5B : 0.196 Hz
   SOM5B : 13.161 Hz
   PV5B : 2.560 Hz
   VIP5B : 13.600 Hz
   NGF5B : 15.643 Hz
   IT6 : 1.339 Hz
   CT6 : 0.892 Hz
   SOM6 : 47.630 Hz
   PV6 : 0.363 Hz
   VIP6 : 8.275 Hz
   NGF6 : 81.697 Hz
   TC : 4.940 Hz
   TCM : 5.097 Hz
   HTC : 4.384 Hz
   IRE : 2.783 Hz
   IREM : 3.198 Hz
   TI : 1.976 Hz
   TIM : 3.241 Hz

will setup simdat.py for easier load/analysis of sim data ... 

* 23aug7
** continue
* 23aug10
** continue test on edge

with 30 cores: 
  Done; run time = 4884.62 s; real-time ratio: 0.00.

Gathering data...
  Done; gather time = 50.09 s.

Analyzing...
  Cells: 12908
  Connections: 0 (0.00 per cell)
  Spikes: 235909 (1.83 Hz)
  Simulated time: 10.0 s; 30 workers
  Run time: 4884.62 s
   NGF1 : 1.697 Hz
   IT2 : 0.261 Hz
   SOM2 : 16.040 Hz
   PV2 : 8.469 Hz
   VIP2 : 24.775 Hz
   NGF2 : 8.727 Hz
   IT3 : 0.156 Hz
   SOM3 : 0.843 Hz
   PV3 : 4.789 Hz
   VIP3 : 15.738 Hz
   NGF3 : 4.935 Hz
   ITP4 : 0.287 Hz
   ITS4 : 0.287 Hz
   SOM4 : 0.946 Hz
   PV4 : 2.958 Hz
   VIP4 : 12.131 Hz
   NGF4 : 6.050 Hz
   IT5A : 1.557 Hz
   CT5A : 0.464 Hz
   SOM5A : 2.291 Hz
   PV5A : 1.893 Hz
   VIP5A : 8.710 Hz
   NGF5A : 10.750 Hz
   IT5B : 3.406 Hz
   CT5B : 0.133 Hz
   PT5B : 0.130 Hz
   SOM5B : 11.856 Hz
   PV5B : 0.940 Hz
   VIP5B : 7.076 Hz
   NGF5B : 9.617 Hz
   IT6 : 0.678 Hz
   CT6 : 0.532 Hz
   SOM6 : 22.943 Hz
   PV6 : 44.274 Hz
   VIP6 : 52.917 Hz
   NGF6 : 45.032 Hz
   TC : 4.501 Hz
   TCM : 4.436 Hz
   HTC : 4.087 Hz
   IRE : 2.546 Hz
   IREM : 3.082 Hz
   TI : 1.800 Hz
   TIM : 3.067 Hz

hmm, number of spikes is much different compared to the run on cycle ... 
also does not finish saving data 

  Saving output as: 23aug3_B0_node_8.pkl ... 
  Done; saving time = 3.65 s.

Searching for .pkl node files in data/23aug3_B0/23aug3_B0_node_data ...

Gathering data from files for simulation: 23aug3_B0 ...
  Merging data file: 23aug3_B0_node_0.pkl
Traceback (most recent call last):
  File "init.py", line 48, in <module>
    sim.gatherDataFromFiles()
  File "/home/samn/netpyne/netpyne/sim/gather.py", line 426, in gatherDataFromFiles
    allCells.extend([cell.__getstate__() for cell in data['cells']])
  File "/home/samn/netpyne/netpyne/sim/gather.py", line 426, in <listcomp>
    allCells.extend([cell.__getstate__() for cell in data['cells']])
AttributeError: 'dict' object has no attribute '__getstate__'
bash: /opt/miniconda3/envs/py376/lib/libtinfo.so.6: no version information available (required by bash)

(py376) samn@edge:~/A1$ python
Python 3.7.6 (default, Jan  8 2020, 19:59:22) 
[GCC 7.3.0] :: Anaconda, Inc. on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import neuron
>>> neuron.__version__
'8.2.2'
>>> import netpyne
>>> netpyne.__version__
'1.0.4.2'
>>> 

and on cycle:
(base) samn@cycle:~/accumnavnet$ python
Python 3.7.6 (default, Jan  8 2020, 19:59:22) 
[GCC 7.3.0] :: Anaconda, Inc. on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import netpyne
>>> netpyne.__version__
'1.0.2.1'
>>> import neuron
>>> neuron.__version__
'8.0.2'
>>> 

so, older versions of both on cycle ... 

can also try on edge w/o the gatherdatafromfiles ... 

had an extra call to gatherdata ... will try again w/o it...

and try with 60 cores ... see if that speeds up (took ~180 minutes with 30 cores on edge)

./myrun 60

  Done; run time = 4239.55 s; real-time ratio: 0.00.

took ~70 minutes ...

Saving an output file for each node in: data/23aug10_A0/23aug10_A0_node_data
Searching for .pkl node files in data/23aug10_A0/23aug10_A0_node_data ...

Gathering data from files for simulation: 23aug10_A0 ...
  Merging data file: 23aug10_A0_node_0.pkl
Traceback (most recent call last):
  File "init.py", line 48, in <module>
    sim.gatherDataFromFiles()
  File "/home/samn/netpyne/netpyne/sim/gather.py", line 426, in gatherDataFromFiles
    allCells.extend([cell.__getstate__() for cell in data['cells']])
  File "/home/samn/netpyne/netpyne/sim/gather.py", line 426, in <listcomp>
    allCells.extend([cell.__getstate__() for cell in data['cells']])
AttributeError: 'dict' object has no attribute '__getstate__'

so, get the same error as before ...

will install versions used on cycle

pip uninstall neuron
pip uninstall netpyne

pip install neuron==8.0.2
pip install netpyne==1.0.2.1

ok, try that again ...

./myrun 48

  Cells: 12908
  Connections: 0 (0.00 per cell)
  Spikes: 205839 (1.59 Hz)
  Simulated time: 10.0 s; 48 workers
  Run time: 3904.57 s
   NGF1 : 1.673 Hz
   IT2 : 0.193 Hz
   SOM2 : 12.540 Hz
   PV2 : 4.015 Hz
   VIP2 : 23.019 Hz
   NGF2 : 7.960 Hz
   IT3 : 0.141 Hz
   SOM3 : 0.858 Hz
   PV3 : 2.888 Hz
   VIP3 : 11.005 Hz
   NGF3 : 4.669 Hz
   ITP4 : 0.189 Hz
   ITS4 : 0.204 Hz
   SOM4 : 0.804 Hz
   PV4 : 1.532 Hz
   VIP4 : 7.777 Hz
   NGF4 : 4.979 Hz
   IT5A : 1.247 Hz
   CT5A : 0.242 Hz
   SOM5A : 2.129 Hz
   PV5A : 0.571 Hz
   VIP5A : 3.378 Hz
   NGF5A : 6.300 Hz
   IT5B : 2.579 Hz
   CT5B : 0.063 Hz
   PT5B : 0.082 Hz
   SOM5B : 12.238 Hz
   PV5B : 0.248 Hz
   VIP5B : 1.731 Hz
   NGF5B : 5.279 Hz
   IT6 : 0.540 Hz
   CT6 : 0.340 Hz
   SOM6 : 12.087 Hz
   PV6 : 66.013 Hz
   VIP6 : 68.082 Hz
   NGF6 : 31.905 Hz
   TC : 4.322 Hz
   TCM : 4.186 Hz
   HTC : 4.057 Hz
   IRE : 2.533 Hz
   IREM : 2.982 Hz
   TI : 1.858 Hz
   TIM : 3.162 Hz
Saving output as data/23aug10_A0/23aug10_A0_data.pkl ... 
Finished saving!
  Done; saving time = 30.59 s.

ok, ran to completion ... and took ~65 minutes with 48 cores

** neuron/netpyne version used in A1 paper: neuron==7.8.2 and netpyne==1.0.2.1
* 23aug14
** check output from 23aug10_A0_

python -i simdat.py

loading data from 23aug10_A0
Traceback (most recent call last):
  File "simdat.py", line 132, in <module>
    simConfig, dstartidx, dendidx, dnumc, dspkID, dspkT = loadsimdat(name,lpop=[])
  File "simdat.py", line 28, in loadsimdat
    if simConfig['net']['pops'][p]['tags']['numCells'] > 0:
KeyError: 'tags'

no 'tags' used here

name = '23aug10_A0'
simConfig = pickle.load(open('data/'+name+'/'+name+'_data.pkl','rb'))
simConfig['net']['pops'].keys()
odict_keys(['NGF1', 'IT2', 'SOM2', 'PV2', 'VIP2', 'NGF2', 'IT3', 'SOM3', 'PV3', 'VIP3', 'NGF3', 'ITP4', 'ITS4', 'SOM4', 'PV4', 'VIP4', 'NGF4', 'IT5A', 'CT5A', 'SOM5A', 'PV5A', 'VIP5A', 'NGF5A', 'IT5B', 'CT5B', 'PT5B', 'SOM5B', 'PV5B', 'VIP5B', 'NGF5B', 'IT6', 'CT6', 'SOM6', 'PV6', 'VIP6', 'NGF6', 'TC', 'TCM', 'HTC', 'IRE', 'IREM', 'TI', 'TIM'])
simConfig['net']['pops']['NGF1'].keys() # odict_keys(['cellType', 'cellModel', 'ynormRange', 'density', 'pop', 'numCells', 'cellGids'])
simConfig['net']['pops']['NGF1']['numCells'] # 151

python -i simdat.py

